version: 2.1
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end audit
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical 

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical 

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="$CIRCLE_WORKFLOW_ID"
      - run:
          name: Get backend ip, save to memstash and inventory.txt
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --output text)
            echo "${BACKEND_IP}"
            echo "$BACKEND_IP">> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: ace5d9f0-e9ca-4a29-9850-fbeea796e0d3" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/backend-ip-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="$CIRCLE_WORKFLOW_ID"  

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1d:ae:92:9a:13:48:c4:00:f7:a6:6b:32:7a:b8:db:05"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd
            ls
            ansible-playbook -i inventory.txt configure-server.yml 
      # Here's where you will add some code to rollback on failure     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm install
            npm run  migrations > migrations.txt
            cat migrations.txt
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep "has been executed successfully" migrations.txt;
            then
              echo "Migration success"
              curl -H "Content-Type: text/plain" -H "token: ace5d9f0-e9ca-4a29-9850-fbeea796e0d3" --request PUT --data "1" https://api.memstash.io/values/migration-status-${CIRCLE_WORKFLOW_ID}
            else
              echo "Migration failed"
              curl -H "Content-Type: text/plain" -H "token: ace5d9f0-e9ca-4a29-9850-fbeea796e0d3" --request PUT --data "0" https://api.memstash.io/values/migration-status-${CIRCLE_WORKFLOW_ID}            
     # Here's where you will add some code to rollback on failure    

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: ace5d9f0-e9ca-4a29-9850-fbeea796e0d3" --request GET https://api.memstash.io/values/backend-ip-${CIRCLE_WORKFLOW_ID})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            npm install
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 sync frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID}
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1d:ae:92:9a:13:48:c4:00:f7:a6:6b:32:7a:b8:db:05"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl nodejs npm openssh
            pip install aws-cli
            aws --version
            ansible --version
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
              cat inventory.txt
              ANSIBLE_HOST_KEY_CHECKING=False
              ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure      

    
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
 #     - test-frontend:
 #         requires: [build-frontend]
 #     - test-backend:
 #         requires: [build-backend]
 #     - scan-backend:
 #         requires: [build-backend]
 #     - scan-frontend:
 #         requires: [build-frontend]
      - deploy-infrastructure:
   #       requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
  #    - smoke-test:
  #        requires: [deploy-backend, deploy-frontend]
  #    - cloudfront-update:
  #        requires: [smoke-test]
  #    - cleanup:
  #        requires: [cloudfront-update]              